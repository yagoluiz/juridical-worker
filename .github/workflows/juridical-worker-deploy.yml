name: juridical-worker-deploy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

  workflow_dispatch:

env:
  DOTNET_VERSION: 6.0.x
  GCR_IMAGE: juridical-worker
  K8S_NAMESPACE: juridical
  K8S_JURIDICAL_WORKER_SECRET: juridical-worker-secret
  DEPLOYMENT_NAME: juridical-worker

  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}

  K8S_LEGAL_PROCESS_USER: ${{ secrets.K8S_LEGAL_PROCESS_USER }}
  K8S_LEGAL_PROCESS_PASSWORD: ${{ secrets.K8S_LEGAL_PROCESS_PASSWORD }}
  K8S_MESSAGE_SERVICE_API_TOKEN: ${{ secrets.K8S_MESSAGE_SERVICE_API_TOKEN }}
  K8S_MESSAGE_SERVICE_FROM: ${{ secrets.K8S_MESSAGE_SERVICE_FROM }}
  K8S_MESSAGE_SERVICE_TO: ${{ secrets.K8S_MESSAGE_SERVICE_TO }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    needs: [build]
    # if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: "auth"
        name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      # - name: Docker configuration
      #   run: |-
      #     gcloud --quiet auth configure-docker

      # - name: Docker build
      #   run: |-
      #     docker build \
      #       --tag "gcr.io/$PROJECT_ID/$GCR_IMAGE:$GITHUB_SHA" \
      #       --tag "gcr.io/$PROJECT_ID/$GCR_IMAGE:latest" \
      #       .

      # - name: Docker publish
      #   run: |-
      #     docker push --all-tags "gcr.io/$PROJECT_ID/$GCR_IMAGE"

      - id: "get-credentials"
        name: Authenticate to GKE
        uses: "google-github-actions/get-gke-credentials@v0"
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Create juridical namespace
        run: |-
          kubectl apply -f k8s/namespaces/juridical-namespace.yaml

      - name: Delete k8s secret
        run: |-
          kubectl delete secret ${{ env.K8S_JURIDICAL_WORKER_SECRET }} -n ${{ env.K8S_NAMESPACE }} --ignore-not-found

      - name: Create k8s secrets
        run: |-
          kubectl create secret generic ${{ env.K8S_JURIDICAL_WORKER_SECRET }} -n ${{ env.K8S_NAMESPACE }} \
            --from-literal=LEGAL_PROCESS_USER='${{ env.K8S_LEGAL_PROCESS_USER }}' \
            --from-literal=LEGAL_PROCESS_PASSWORD='${{ env.K8S_LEGAL_PROCESS_PASSWORD }}' \
            --from-literal=MESSAGE_SERVICE_API_TOKEN='${{ env.K8S_MESSAGE_SERVICE_API_TOKEN }}' \
            --from-literal=MESSAGE_SERVICE_FROM='${{ env.K8S_MESSAGE_SERVICE_FROM }}' \
            --from-literal=MESSAGE_SERVICE_TO='${{ env.K8S_MESSAGE_SERVICE_TO }}'

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy k8s
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$GCR_IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl get services -o wide
